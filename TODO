Lighting - How to do it?
	Need to have a mixture of global/local illumination
	Local stuff will be handled on client
		Including AO, diffuse, some specular stuff (maybe)
		
	Global illumination - some form of radiosity
		Possibilities:
			Store a 6-directional light propagtion sphere at each map cell
				+ O(n) update cost
				
				- May take multiple frames to propagate
				
			Store only surface data and recalculate lighting per voxel
				+ < n update cost
				
				- Complicated
				- More bugs...
				
		Need to figure out how to synchronize client with server
			Strategy 1: Have client do dead reckoning
				+ Low bandwidth
				- Client needs to get enough data to properly compute
				- Could cause bandwidth problems
			Strategy 2: Replicate all data
				+ easy client
				- Expensive
				
			Maybe try replicating the incident radiance at the boundary of each
			chunk to the client, use dead reckoning on the client to interpolate
			light values within a chunk
			
			So client should know:
				1. Lighting conditions within chunk (via torches, blocks, etc.), etc.
				2. Lighting conditions at chunk boundary (sent from server)
				3. Need to then replicate 16*16*6 light values to client per
				 block
				4. And update these values when they change.... (nasty)
				5. Only need to do lighting for chunks that contain surface regions
				
			Another possibility:
				Use GPU on client to update visibility map...

Goal:
	Make the client look like Minecraft HD: http://www.youtube.com/watch?v=qjhtjDnneLQ
	HDR rendering
	Ambient occlusion
	Neat water effects
		
Shadows:
	Need to do a global shadow mapping pass for the sun / most surface chunks
	For torches, only calculate shadows in chunk/adjacent chunks
		Also if we use hemicube for shadow map, could save some time
		
	Lava: This seems trickier
		Need to find a good way to fake area lights...
		Fortunately light radius should be small, like torches
			So only need to do local lighting calculations
		

Debug the new entity replication framework

Add stuff for rendering entities

Add a client debugger
	Need some way to log messages
	Track entities/chunks

Switch http server to a different backend (preferrably using epoll)
	Mongoose is not very efficiently designed, and doesn't allow for things like persistent sockets/streaming
	Custom HTTP server may be best
		Desired features:
			epoll based implementation
			multithreaded (obviously)
			HTTP compression
			cache all static HTTP responses
			no extra memcpys!
			
User write/writev to do io, avoids blocking/extra work.

Implement HTTP streaming for heartbeat events!
	This would be awesome, but will probably be too expensive

Instead of usleep, use a realtime timer event in the main loop
	Should reduce pointless waiting and improve concurrency

Introduce some type of precompilation phase for the client code
	Javascript should be statically checked (to the extent that it is possible)
	Also:
		Minified
		Optimized
	Maybe try Closure from google?
	Other note: JSLint is a terrible tool, it seems to mostly enforce the author's own prejuidices while providing little in the way of any substantial performance/safety guarantees.
		Other lint style checkers seem to be equally terrible


Need to test code on other platforms:
	Firefox 4
	Opera
	(IE support is not going to happen, at least until MS commits to supporting webgl)


Big issues:
	How to conserve bandwidth?  Need some measurements to figure out how much we are using...


Different visibility strategies for surface/cave/air chunks
	For air chunks, client should use default vis stuff
	For surface, when client does fetch, should also pull in column above
	For caves, client should grab a ball of chunks nearby

Add some fog to hide loading new chunks


Complete:

Implement some form of occlusion query to accelerate map loading. (done)
	Right now it uses the naive strategy of just grabbing all blocks in a radius
	Might be better to do something fancy like this:
		Every n frames:
			Render a low resolution version of the world onto a cube
				For each chunk within some large radius (say 10x10x10):
					If chunk is loaded, draw it with depth 0
					Otherwise, draw a cube at chunk location instead, colored by chunkID
			Read resulting texture back onto CPU
			For each pixel:
				If color is unloaded chunk,
				Issue fetch command for chunk

